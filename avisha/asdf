using System;
using System.Collections.Generic;
using System.Linq;
			
public class Program
{
  public static void Main()
  {
    shitsort a = new shitsort();
    Console.WriteLine("Hello C#");
  }
}

public class shitsort
{
  List<int> a ; 
  
  public shitsort()
  {
    a = new List<int>();
    
    a.Add(6);
    
    a.Add(7);
    
    a.Add(5);
    
    a.Add(8);
    a.Add(4);
    a.Add(9);
    a.Add(3);
    
    summary();
  	sort();
  }
 	public void summary()
  { string s = "";
    for(int i=0 ; i<a.Count; i++)
    {
      s+=a[i]+" - ";
    }
   Console.WriteLine(s);
  }
  
  public void sort()
  {
    List<int> temp = new List<int> (a);
    a.Clear();
    for(int i=0 ; i<temp.Count; i++)
    {
      insert(temp[i]);
    }
    // Heap was built where a[0] is highest 
    
    
    //swap then demote
    for (int i = a.Count-1; i>1 ;i-- )
    {
      summary();
      int hand = a[0];
      a[0] = a[i];
      a[i] = hand;
      
      Console.WriteLine("top of the heap was "+ a[i]);
      int j=0;
      int safety = 0;
      int n= i; // n is length of remaining heap
      Console.WriteLine("heaplength: "+n);
      
     	summary();
      while(j<n)
      {
        int mrLeft = (j*2)+1;
        int mrRight = (j*2)+2;
        // ikaw na ba si mr Right
        
        Console.WriteLine("Checking on "+a[j]);
       
        if (a[j]
          
        if (safety>50)
        {
          break;
          
        }
        
      }

    }
    
      summary();
  
}
  
  public void insert(int x)
  {
    int parentIndex = 0;
    int indexxx = a.Count; // index of end of array
    a.Add(x);// add new element at the end of array
    while (indexxx>0)//Compare the key of the newly added element with it’s parent’s key to check if heap property is observed
    {
      parentIndex = (int)((indexxx-1)/2);
      if (a[indexxx] > a[parentIndex])
      {
        int hand = a[indexxx];
        a[indexxx] = a[parentIndex];
        a[parentIndex] = hand;
        indexxx = parentIndex;
      }
      else 
      {
        break;
      }
      
    }
    
  }
}